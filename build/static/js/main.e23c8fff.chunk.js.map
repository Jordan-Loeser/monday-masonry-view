{"version":3,"sources":["components/Card.js","components/InstructionScreen.js","App.js","serviceWorker.js","index.js"],"names":["CardContainer","styled","div","gutterSize","props","numCols","hasImage","res","i","Image","img","Content","isOverlay","Card","item","showName","onLoad","hasOwnProperty","id","src","image_url","alt","name","InstructionScreenContainer","InstructionsScreen","data-testid","monday","mondaySdk","MASONRY_CONFIG","LoaderContainer","MasonryContainer","containerHeight","Break","span","App","state","loading","settings","context","items","groups","windowWidth","window","innerWidth","showNonImageItems","showItemNames","length","column_values","sampleColumn","sampleImageData","JSON","parse","value","columnType","reduce","acc","url","assetIds","files","isImage","assetId","api","variables","filter","then","assetUrls","data","assets","curr","hasSelectedColumn","Object","keys","this","image_column","setState","boardIds","columnIds","a","boards","parseItems","parsedItems","addEventListener","updateWindowDimensions","bind","listen","view_settings","includes","pullItems","setContainerHeight","removeEventListener","override_num_cols","parseInt","num_cols","cardList","Array","from","document","querySelectorAll","maxItemsPerCol","Math","ceil","getNumCols","sortedCardHeights","map","card","offsetHeight","sort","b","tallestPossibleColumn","slice","itemsToShow","className","svgClassName","key","handleImageLoaded","fill","_","InstructionScreen","React","Component","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"ikCAGA,IAAMA,EAAgBC,IAAOC,IAAV,KAEP,gBAAGC,EAAH,EAAGA,WAAH,kBAAyBA,EAAzB,cAAyCA,EAAzC,WACD,SAACC,GAAD,qBAAmB,IAAMA,EAAMC,QAA/B,eAA6CD,EAAMD,WAAnD,UAMP,gBAAGG,EAAH,EAAGA,SAAUD,EAAb,EAAaA,QAAb,OACAC,EAAW,GAAH,sBAAuC,IAAf,EAAID,GAA5B,SAKR,YAEA,IAFkB,IAAfA,EAAc,EAAdA,QACCE,EAAM,GACDC,EAAI,EAAGA,GAAKH,EAASG,IAC5BD,GAAG,wBAAqBF,EAArB,eAAmCG,EAAnC,sBAAkDA,EAAlD,OAEL,OAAOD,KAILE,EAAQR,IAAOS,IAAV,KAKLC,EAAUV,IAAOC,IAAV,KAQT,qBAAGU,UACM,mLAOL,6BAwBOC,EArBF,SAAC,GAAqD,IAAnDC,EAAkD,EAAlDA,KAAMX,EAA4C,EAA5CA,WAAYE,EAAgC,EAAhCA,QAASU,EAAuB,EAAvBA,SAAUC,EAAa,EAAbA,OAC7CV,EAAWQ,EAAKG,eAAe,aACrC,OACE,kBAACjB,EAAD,CACEkB,GAAG,cACHf,WAAYA,EACZE,QAASA,EACTC,SAAUA,GAETA,GACC,kBAACG,EAAD,CAAOO,OAAQA,EAAQG,IAAKL,EAAKM,UAAWC,IAAKP,EAAKQ,OAEvDP,GACC,kBAACJ,EAAD,CAASC,UAAWN,GAClB,4BAAKQ,EAAKQ,S,yMC9DpB,IAAMC,EAA6BtB,IAAOC,IAAV,KAmBjBsB,EAVY,kBACzB,kBAACD,EAAD,CAA4BE,cAAY,gBACtC,4DACA,uH,kgBCNJ,IAAMC,EAASC,MAETC,EACQ,GADRA,EAEM,EAFNA,EAGM,EAHNA,EAIM,EAMNC,EAAkB5B,IAAOC,IAAV,KAMf4B,EAAmB7B,IAAOC,IAAV,KAGV,SAACE,GAAD,MAAW,UAAGA,EAAM2B,gBAAT,QAAgC,IAErCH,EACDA,GAKXI,EAAQ/B,IAAOgC,KAAV,KAIP,YAEA,IAFkB,IAAf5B,EAAc,EAAdA,QACCE,EAAM,GACDC,EAAI,EAAGA,GAAKH,EAASG,IAC5BD,GAAG,wBAAqBF,EAArB,eAAmCG,EAAnC,sBAAkDA,EAAlD,OAEL,OAAOD,KAkPI2B,E,kDA7Ob,WAAY9B,GAAQ,IAAD,8BACjB,cAAMA,IAGD+B,MAAQ,CACXC,SAAS,EACTC,SAAU,GACVC,QAAS,GACTC,MAAO,GACPC,OAAQ,GAERT,gBAAiB,IACjBU,YAAaC,OAAOC,WACpBC,mBAAmB,EACnBC,eAAe,GAdA,E,gGAmBFN,G,kFAEM,IAAjBA,EAAMO,O,yCAAqBP,G,YACcA,EAAM,GAA3CQ,cACoB,KADLC,O,MAAe,G,GACrBF,O,yCAAqBP,G,UAGhCU,EAAkBC,KAAKC,MAAMH,EAAa,GAAGI,OA5DrC,eA6DRC,EAAaJ,EAAgBhC,eAAe,OA7DpC,YA+DVgC,EAAgBhC,eAAe,SA9DrB,YAgEV,M,yCAIKsB,EAAMe,QAAO,SAACC,EAAKzC,GAAU,IAAD,IAC3B0C,EAAG,oBAAGN,KAAKC,MAAMrC,EAAKiC,cAAc,GAAGK,cAApC,aAAG,EAAyCI,WAA5C,QAAmD,KAC5D,MAAM,GAAN,mBAAWD,GAAX,CAAgBC,EAAG,2BAAQ1C,GAAR,IAAcM,UAAWoC,IAAQ1C,MACnD,K,UAvES,cA2EVuC,E,wBACgB,EAEZI,EAAWlB,EAAMe,QAAO,SAACC,EAAKzC,GAAU,IAAD,IACrC4C,EAAK,oBAAGR,KAAKC,MAAMrC,EAAKiC,cAAc,GAAGK,cAApC,aAAG,EAAyCM,aAA5C,QAAqD,GAChE,MAAM,GAAN,mBACKH,GADL,CAEEG,EAAMZ,OAAS,GAA0B,SAArBY,EAAM,GAAGC,QACzBD,EAAM,GAAGE,SAPA,MAUd,I,gKAUIlC,EACJmC,I,8IAAW,CACVC,UAAW,CACTL,SAAUA,EAASM,QAAO,SAACH,GAAD,OAvBf,IAuB4BA,QAG1CI,MAAK,SAACzD,GAAS,IAER0D,EADa1D,EAAI2D,KAAfC,OACiBb,QACvB,SAACC,EAAKa,GAAN,mBAAC,eAAoBb,GAArB,kBAA2Ba,EAAKlD,GAAKkD,EAAKZ,QAC1C,IAGF,OAAOjB,EAAMe,QAAO,SAACC,EAAKzC,EAAMN,GAC9B,OAlCW,IAkCPiD,EAASjD,GAAuB,GAAN,mBAAW+C,GAAX,CAAgBzC,IACxC,GAAN,mBAAWyC,GAAX,4BAAqBzC,GAArB,IAA2BM,UAAW6C,EAAUR,EAASjD,UACxD,Q,iCAIF+B,G,qIAGI,IAAD,aACJ8B,EAC4D,IAAhEC,OAAOC,KAAP,oBAAYC,KAAKrC,MAAME,gBAAvB,aAAY,EAAqBoC,oBAAjC,QAAiD,IAAI3B,OAiBvD0B,KAAKE,SAAS,CAAEtC,SAAS,IACzBV,EACGmC,IAlBQ,2TAkBG,CACVC,UAAW,CACTa,SAAUH,KAAKrC,MAAMG,QAAQqC,SAC7BC,UAAWP,EACPC,OAAOC,KAAP,UAAYC,KAAKrC,MAAME,gBAAvB,aAAY,EAAqBoC,cACjC,CAAC,OAGRT,KATH,uCASQ,WAAOzD,GAAP,qBAAAsE,EAAA,+DACsBtE,EAAI2D,KAAKY,OAAO,GAAlCtC,EADJ,EACIA,OAAQD,EADZ,EACYA,MADZ,SAEsB,EAAKwC,WAAWxC,GAFtC,OAEEyC,EAFF,OAGJ,EAAKN,SAAS,CACZlC,SACAD,MAAOyC,EACP5C,SAAS,IANP,2CATR,yD,0CAoBmB,IAAD,OAClBM,OAAOuC,iBAAiB,SAAUT,KAAKU,uBAAuBC,KAAKX,OACnE9C,EAAO0D,OAAO,YAAY,SAAC7E,GAAS,IAAD,QACjC,EAAKmE,SACH,CACErC,SAAU9B,EAAI2D,KACdtB,kBAAiB,oBACfrC,EAAI2D,YADW,aACf,EAAUmB,cAAcC,SAAS,yBADlB,SAEjBzC,cAAa,oBAAEtC,EAAI2D,YAAN,aAAE,EAAUmB,cAAcC,SAAS,oBAAnC,UAEf,EAAKC,cAGT7D,EAAO0D,OAAO,WAAW,SAAC7E,GACxB,EAAKmE,SAAS,CAAEpC,QAAS/B,EAAI2D,MAAQ,EAAKqB,cAE5Cf,KAAKgB,uB,2CAILhB,KAAKgB,uB,6CAIL9C,OAAO+C,oBACL,SACAjB,KAAKU,uBAAuBC,KAAKX,S,+CAKnCA,KAAKE,SAAS,CAAEjC,YAAaC,OAAOC,e,mCAGxB,IAAD,EAEX,OACE,UAAA6B,KAAKrC,MAAME,gBAAX,eAAqBqD,oBACrBlB,KAAKrC,MAAME,SAASpB,eAAe,YAE5B0E,SAASnB,KAAKrC,MAAME,SAASuD,UAGlClD,OAAOC,YAAc,KAChBf,EACEc,OAAOC,YAAc,IACvBf,EAEFA,I,2CAIP,IAAMiE,EAAWC,MAAMC,KAAKC,SAASC,iBAAiB,iBAChDC,EAAiBC,KAAKC,KAAKP,EAAS/C,OAAS0B,KAAK6B,cAClDC,EAAoBT,EACvBU,KAAI,SAACC,GAAD,OAAUA,EAAKC,aAAe7E,KAClC8E,MAAK,SAAC7B,EAAG8B,GAAJ,OAAUA,EAAI9B,KAChB+B,EACJhF,EACA0E,EACGO,MAAM,EAAGX,GACT5C,QAAO,SAACC,EAAKa,GAAN,OAAeb,EAAMa,IAAM,GACnCwC,IAA0BpC,KAAKrC,MAAMJ,iBACvCyC,KAAKE,SAAS,CACZ3C,gBAAiB6E,M,0CAMrBpC,KAAKgB,uB,+BAGG,IAAD,OACDnF,EAAUmE,KAAK6B,aACfS,EACJtC,KAAKrC,MAAMS,mBAAqB4B,KAAKrC,MAAMU,cACvC2B,KAAKrC,MAAMI,MACXiC,KAAKrC,MAAMI,MAAMwB,QAAO,SAACjD,GAAD,OAAUA,EAAKG,eAAe,gBAC5D,OACE,yBAAK8F,UAAU,OACZvC,KAAKrC,MAAMC,QACV,kBAACP,EAAD,KACE,kBAAC,SAAD,CAAQmF,aAAa,oBAEpBxC,KAAKrC,MAAMS,mBAA4C,IAAvBkE,EAAYhE,OAG/C,kBAAChB,EAAD,CAAkBC,gBAAiByC,KAAKrC,MAAMJ,iBAC3C+E,EAAYP,KAAI,SAACzF,EAAMN,GAAP,OACf,kBAAC,EAAD,CACEyG,IAAG,eAAUzG,GACbM,KAAMA,EACNX,WAAYyB,EACZvB,QAASA,EACTU,SAAU,EAAKoB,MAAMU,cACrB7B,OAAQ,EAAKkG,kBAAkB/B,KAAK,QAGvCW,MAAMzF,EAAU,GACd8G,OACAZ,KAAI,SAACa,EAAG5G,GAAJ,OACH,kBAACwB,EAAD,CAAOiF,IAAG,gBAAWzG,GAAKH,QAASA,QAhBzC,kBAACgH,EAAD,W,GArNQC,IAAMC,WCvCJC,QACW,cAA7B9E,OAAO+E,SAASC,UAEe,UAA7BhF,OAAO+E,SAASC,UAEhBhF,OAAO+E,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS7B,SAAS8B,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjE,MAAK,SAAAkE,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e23c8fff.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nconst CardContainer = styled.div`\n  margin: 0 8px 8px 0;\n  margin: ${({ gutterSize }) => `0 ${gutterSize}px ${gutterSize}px 0`};\n  width: ${(props) => `calc(${100 / props.numCols}% - ${props.gutterSize}px)`};\n  background-color: #fff;\n  border-radius: 8px;\n  box-shadow: 0px 6px 20px -2px rgba(0, 0, 0, 0.2);\n  box-sizing: border-box;\n  overflow: hidden;\n  ${({ hasImage, numCols }) =>\n    hasImage ? \"\" : `min-height: ${(8 - numCols) * 72}px`};\n  justify-content: flex-end;\n  display: flex;\n  flex-direction: column;\n  position: relative;\n  ${({ numCols }) => {\n    let res = \"\";\n    for (let i = 1; i <= numCols; i++) {\n      res += `&:nth-of-type(${numCols}n + ${i}) { order: ${i}; }`;\n    }\n    return res;\n  }}\n`;\n\nconst Image = styled.img`\n  width: 100%;\n  display: block;\n`;\n\nconst Content = styled.div`\n  padding: 16px;\n  width: 100%;\n  box-sizing: border-box;\n  h2 {\n    margin: 0;\n    max-width: 180px;\n  }\n  ${({ isOverlay }) =>\n    isOverlay\n      ? `\n        position: absolute; \n        color: #fff; \n        text-shadow: 0px 0px 36px #000; \n        background: linear-gradient(0deg,rgba(0,0,0,0.24),transparent);\n      `\n      : \"h2 { margin-top: 48px }\"}\n`;\n\nconst Card = ({ item, gutterSize, numCols, showName, onLoad }) => {\n  const hasImage = item.hasOwnProperty(\"image_url\");\n  return (\n    <CardContainer\n      id=\"masonryCard\"\n      gutterSize={gutterSize}\n      numCols={numCols}\n      hasImage={hasImage}\n    >\n      {hasImage && (\n        <Image onLoad={onLoad} src={item.image_url} alt={item.name} />\n      )}\n      {showName && (\n        <Content isOverlay={hasImage}>\n          <h2>{item.name}</h2>\n        </Content>\n      )}\n    </CardContainer>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst InstructionScreenContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n  width: 100%;\n`;\n\nconst InstructionsScreen = () => (\n  <InstructionScreenContainer data-testid=\"instructions\">\n    <h2>There are no items to show! </h2>\n    <p>\n      Either select an \"Image Column\" or check \"Show Items Without Images\" to\n      use this view.\n    </p>\n  </InstructionScreenContainer>\n);\n\nexport default InstructionsScreen;\n","import React from \"react\";\nimport mondaySdk from \"monday-sdk-js\";\nimport styled from \"styled-components\";\nimport { Loader } from \"monday-ui-react-core\";\nimport { Card, InstructionScreen } from \"./components\";\n\nimport \"monday-ui-react-core/dist/main.css\";\nimport \"./App.css\";\n\nconst monday = mondaySdk();\n\nconst MASONRY_CONFIG = {\n  gutterSize: 16,\n  dGridCol: 4,\n  tGridCol: 3,\n  mGridCol: 2,\n};\n\nconst LINK_TYPE = \"LINK_TYPE\";\nconst FILE_TYPE = \"FILE_TYPE\";\n\nconst LoaderContainer = styled.div`\n  width: 48px;\n  margin: 0 auto;\n  height: 100vh;\n`;\n\nconst MasonryContainer = styled.div`\n  display: flex;\n  flex-flow: column wrap;\n  height: ${(props) => `${props.containerHeight}px` || \"auto\"};\n  width: 100%;\n  padding-left: ${MASONRY_CONFIG.gutterSize}px;\n  padding-top: ${MASONRY_CONFIG.gutterSize}px;\n  box-sizing: border-box;\n  align-content: flex-start;\n`;\n\nconst Break = styled.span`\n  flex-basis: 100%;\n  width: 0;\n  margin: 0;\n  ${({ numCols }) => {\n    let res = \"\";\n    for (let i = 1; i <= numCols; i++) {\n      res += `&:nth-of-type(${numCols}n + ${i}) { order: ${i}; }`;\n    }\n    return res;\n  }}\n`;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // Default state\n    this.state = {\n      loading: false,\n      settings: {},\n      context: {},\n      items: [],\n      groups: [],\n      // Display\n      containerHeight: 1000,\n      windowWidth: window.innerWidth,\n      showNonImageItems: false,\n      showItemNames: false,\n    };\n  }\n\n  // Assumption: `column_value` properties are the same for all items\n  async parseItems(items) {\n    // If no column is selected, don't parse\n    if (items.length === 0) return items;\n    const { column_values: sampleColumn = [] } = items[0];\n    if (sampleColumn.length === 0) return items;\n\n    // Validate column type\n    const sampleImageData = JSON.parse(sampleColumn[0].value);\n    const columnType = sampleImageData.hasOwnProperty(\"url\")\n      ? LINK_TYPE\n      : sampleImageData.hasOwnProperty(\"files\")\n      ? FILE_TYPE\n      : null;\n\n    // Parse Link Column\n    if (columnType === LINK_TYPE) {\n      return items.reduce((acc, item) => {\n        const url = JSON.parse(item.column_values[0].value)?.url ?? null;\n        return [...acc, url ? { ...item, image_url: url } : item];\n      }, []);\n    }\n\n    // Parse File Column\n    if (columnType === FILE_TYPE) {\n      const NO_IMAGE = -1;\n      // Get asset Ids\n      const assetIds = items.reduce((acc, item) => {\n        const files = JSON.parse(item.column_values[0].value)?.files ?? [];\n        return [\n          ...acc,\n          files.length > 0 && files[0].isImage === \"true\"\n            ? files[0].assetId\n            : NO_IMAGE,\n        ];\n      }, []);\n      // Pull asset URLs from monday\n      const query = `\n        query ($assetIds: [Int]!) {\n          assets (ids: $assetIds) {\n            id\n            url\n          }\n        }\n      `;\n      return monday\n        .api(query, {\n          variables: {\n            assetIds: assetIds.filter((assetId) => assetId !== NO_IMAGE),\n          },\n        })\n        .then((res) => {\n          const { assets } = res.data;\n          const assetUrls = assets.reduce(\n            (acc, curr) => ({ ...acc, [curr.id]: curr.url }),\n            {}\n          );\n          // Reassign asset URLs to correct items\n          return items.reduce((acc, item, i) => {\n            if (assetIds[i] === NO_IMAGE) return [...acc, item];\n            return [...acc, { ...item, image_url: assetUrls[assetIds[i]] }];\n          }, []);\n        });\n    }\n\n    return items;\n  }\n\n  pullItems() {\n    const hasSelectedColumn =\n      Object.keys(this.state.settings?.image_column ?? {}).length !== 0;\n    const query = `\n      query ($boardIds: [Int], $columnIds: [String]) {\n        boards(ids:$boardIds) {\n          groups{\n            id\n          title\n          } \n          items {\n            name\n            column_values(ids:$columnIds) {\n              value\n            }\n          }\n        }\n      }\n    `;\n    this.setState({ loading: true });\n    monday\n      .api(query, {\n        variables: {\n          boardIds: this.state.context.boardIds,\n          columnIds: hasSelectedColumn\n            ? Object.keys(this.state.settings?.image_column)\n            : [\"\"],\n        },\n      })\n      .then(async (res) => {\n        const { groups, items } = res.data.boards[0];\n        const parsedItems = await this.parseItems(items);\n        this.setState({\n          groups,\n          items: parsedItems,\n          loading: false,\n        });\n      });\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"resize\", this.updateWindowDimensions.bind(this));\n    monday.listen(\"settings\", (res) => {\n      this.setState(\n        {\n          settings: res.data,\n          showNonImageItems:\n            res.data?.view_settings.includes(\"show_non_image\") ?? false,\n          showItemNames: res.data?.view_settings.includes(\"show_name\") ?? false,\n        },\n        this.pullItems\n      );\n    });\n    monday.listen(\"context\", (res) => {\n      this.setState({ context: res.data }, this.pullItems);\n    });\n    this.setContainerHeight();\n  }\n\n  componentDidUpdate() {\n    this.setContainerHeight();\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\n      \"resize\",\n      this.updateWindowDimensions.bind(this)\n    );\n  }\n\n  updateWindowDimensions() {\n    this.setState({ windowWidth: window.innerWidth });\n  }\n\n  getNumCols() {\n    // Based on settings\n    if (\n      this.state.settings?.override_num_cols &&\n      this.state.settings.hasOwnProperty(\"num_cols\")\n    )\n      return parseInt(this.state.settings.num_cols);\n\n    // Based on window size\n    if (window.innerWidth >= 1024) {\n      return MASONRY_CONFIG.dGridCol;\n    } else if (window.innerWidth >= 768) {\n      return MASONRY_CONFIG.tGridCol;\n    }\n    return MASONRY_CONFIG.mGridCol;\n  }\n\n  setContainerHeight() {\n    const cardList = Array.from(document.querySelectorAll(\"#masonryCard\"));\n    const maxItemsPerCol = Math.ceil(cardList.length / this.getNumCols());\n    const sortedCardHeights = cardList\n      .map((card) => card.offsetHeight + MASONRY_CONFIG.gutterSize)\n      .sort((a, b) => b - a);\n    const tallestPossibleColumn =\n      MASONRY_CONFIG.gutterSize +\n      sortedCardHeights\n        .slice(0, maxItemsPerCol)\n        .reduce((acc, curr) => acc + curr, 0);\n    if (tallestPossibleColumn !== this.state.containerHeight) {\n      this.setState({\n        containerHeight: tallestPossibleColumn,\n      });\n    }\n  }\n\n  handleImageLoaded() {\n    this.setContainerHeight();\n  }\n\n  render() {\n    const numCols = this.getNumCols();\n    const itemsToShow =\n      this.state.showNonImageItems && this.state.showItemNames\n        ? this.state.items\n        : this.state.items.filter((item) => item.hasOwnProperty(\"image_url\"));\n    return (\n      <div className=\"App\">\n        {this.state.loading ? (\n          <LoaderContainer>\n            <Loader svgClassName=\"loader-size-md\" />\n          </LoaderContainer>\n        ) : !this.state.showNonImageItems && itemsToShow.length === 0 ? (\n          <InstructionScreen />\n        ) : (\n          <MasonryContainer containerHeight={this.state.containerHeight}>\n            {itemsToShow.map((item, i) => (\n              <Card\n                key={`card-${i}`}\n                item={item}\n                gutterSize={MASONRY_CONFIG.gutterSize}\n                numCols={numCols}\n                showName={this.state.showItemNames}\n                onLoad={this.handleImageLoaded.bind(this)}\n              />\n            ))}\n            {Array(numCols - 1)\n              .fill()\n              .map((_, i) => (\n                <Break key={`break-${i}`} numCols={numCols} />\n              ))}\n          </MasonryContainer>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}